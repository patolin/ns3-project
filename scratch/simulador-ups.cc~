#include "ns3/core-module.h"
#include "ns3/wifi-80211p-helper.h"
#include "ns3/wifi-module.h"
#include "ns3/wave-mac-helper.h"
#include "ns3/ocb-wifi-mac.h"
#include <ns3/buildings-module.h>

using namespace ns3;

NS_LOG_COMPONENT_DEFINE("SimuladorUPS");


class SimuladorUPS {
public:
	SimuladorUPS();
	void Run();
	void CommandSetup(int argc, char** argv);
	void SetupWave();
private:

	
	
	uint32_t m_bytesRx;
    uint32_t m_packetsRx;
    uint32_t m_bytesTx;
    uint32_t m_packetsTx;

    uint32_t m_vnBytesTx;
    uint32_t m_vnPacketsTx;

    std::string m_phyMode;
    char m_powerClass; // Class A (0 dBm), Class B (10 dBm), Class C (20 dBm), Class D (28.8 dBm)

    uint32_t m_packetSize; // bytes
    uint32_t m_numPackets;
    double m_secondsInterval; // seconds

    bool m_verbosity;

    std::string m_traceFile;

    //AvailabilityComputer m_avComp;
    double m_availability;

    double m_scnLong; // The long of the simulation scenario
    double m_scnWidth; // The width of the simulation scenario
    uint32_t m_scnRows; // The number of rows of the simulation scenario
    uint32_t m_scnColumns; // The number of columns of the simulation scenario
    uint32_t m_scnGridX; // Manhatann X grid value
    uint32_t m_scnGridY; // Manhatann Y grid value
    uint32_t m_scnRegBetIntX; // Manhatann regions between intersections X value
    uint32_t m_scnRegBetIntY; // Manhatann regions between intersections Y value
    uint32_t m_lanesNum; // Number of lanes in each direction per road
    double m_pavementWidth; // Width of the pavement
    double m_regionSize; // Size of each virtual region
    double m_deltaBuildings; // Gap between buildings
    double m_shoulderWidth; // Width of the hard shoulder
    double m_laneWidth; // Width of lane
    double m_deltaLanes; // Gap between lanes
    double m_buildingsLength; // Length of buildings
    double m_buildingsWidth; // Width of buildings
    double m_buildingsOrigin; // Xo (=Yo) of the first building
    double m_roadWidth; // Total width of the road


    int m_nodeNum;
	int m_nodeNumLider;
	
	uint32_t m_streamNum;
    int m_hotspotNum;
    std::list<uint32_t> m_regionsHotspots;

    uint32_t m_secondsOfDuration; //in s
    Time m_duration;
    Time m_interval;

	// definimos los contenedores
	NodeContainer m_nodes;
	NetDeviceContainer m_netDevices;
	
};


SimuladorUPS::SimuladorUPS()
	: m_bytesRx(0),
	  m_packetsRx(0),
	  m_bytesTx(0),
	  m_packetsTx(0),
	  m_vnBytesTx(0),
	  m_vnPacketsTx(0),
	  m_phyMode("OfdmRate6MbpsBW10MHz"),
	  m_powerClass('C'),
	  m_packetSize(1000),
	  m_numPackets(100000),
	  m_secondsInterval(1.0),
	  m_verbosity(true),
	  m_traceFile("~/Documentos/proyecto-ups/ns-allinone-3.25/ns-3.25/scratch/ns2mobility_process.tcl"),
	  m_scnLong(715),
	  m_scnWidth(715),
	  m_scnRows(13),
	  m_scnColumns(13),
	  m_scnGridX(7),
	  m_scnGridY(7),
	  m_scnRegBetIntX(3),
	  m_scnRegBetIntY(3),
	  m_lanesNum(2),
	  m_pavementWidth(10),
	  m_shoulderWidth(10),
	  m_laneWidth(3),
	  m_deltaLanes(0.1),
	  m_nodeNum(100),
	  m_streamNum(10),
	  m_hotspotNum(6),
	  m_secondsOfDuration(300) {

	}

void SimuladorUPS::CommandSetup(int argc, char **argv) {

    CommandLine cmd;

    cmd.AddValue("phyMode", "Wifi Phy mode", m_phyMode);
    cmd.AddValue("powerClass", "802.11p Power class (A, B, C or D)", m_powerClass);
    cmd.AddValue("streamNum", "Number of streams", m_streamNum);
    cmd.AddValue("hotspotNum", "Number of Wifi Hotspots access points", m_hotspotNum);
    cmd.AddValue("packetSize", "Size of application packet sent by the streams", m_packetSize);
    cmd.AddValue("numPackets", "Number of packets generated by each stream", m_numPackets);
    cmd.AddValue("interval", "Interval between packets sent by each stream [s]", m_secondsInterval);
    cmd.AddValue("verbose", "Turn on log messages", m_verbosity);
    cmd.AddValue("traceFile", "Ns2 movement trace file", m_traceFile);
    cmd.AddValue("nodeNum", "Number of nodes", m_nodeNum);
    cmd.AddValue("duration", "Duration of Simulation [s]", m_secondsOfDuration);
    cmd.AddValue("scnGridX", "X grid value of the Manhatann simulation scenario", m_scnGridX);
    cmd.AddValue("scnGridY", "Y grid value of the Manhatann simulation scenario", m_scnGridY);
    cmd.AddValue("scnRegBetIntX", "Regions between intersections X value of the Manhatann simulation scenario", m_scnRegBetIntX);
    cmd.AddValue("scnRegBetIntY", "Regions between intersections Y value of the Manhatann simulation scenario", m_scnRegBetIntY);
    cmd.AddValue("lanesNum", "Number of lanes in each direction", m_lanesNum);
    cmd.AddValue("pavementWidth", "Width of the pavement [m]", m_pavementWidth);
    cmd.AddValue("shoulderWidth", "Width of the hard shoulder [m]", m_shoulderWidth);
    cmd.AddValue("laneWidth", "Width of lane [m]", m_laneWidth);
    cmd.AddValue("deltaLanes", "Gap between lanes [m]", m_deltaLanes);
    cmd.Parse(argc, argv);
    // Convert to time object
    m_interval = Seconds(m_secondsInterval);
    m_duration = Seconds(m_secondsOfDuration);

    m_roadWidth = 2 * m_lanesNum * m_laneWidth + (2 * m_lanesNum - 1) * m_deltaLanes + 2 * m_shoulderWidth;
    m_regionSize = 4 * m_pavementWidth + m_roadWidth;

    m_deltaBuildings = m_roadWidth + 2 * m_pavementWidth;
    m_buildingsLength = m_scnRegBetIntX * m_regionSize + 2 * m_pavementWidth;
    m_buildingsWidth = m_scnRegBetIntY * m_regionSize + 2 * m_pavementWidth;
    m_buildingsOrigin = (m_regionSize / 2) + (m_deltaBuildings / 2);

    m_scnColumns = (m_scnRegBetIntX + 1)*(m_scnGridX - 1) + 1;
    m_scnRows = (m_scnRegBetIntY + 1)*(m_scnGridY - 1) + 1;
    m_scnLong = m_scnColumns*m_regionSize;
    m_scnWidth = m_scnRows*m_regionSize;
    
}

void SimuladorUPS::SetupWave() {

    NS_LOG_DEBUG("Instalando capa f√≠sica y mac en los nodos...");


    m_nodosLider.Create(m_nodeNumLider);
	    

    // The below set of helpers will help us to put together the wifi NICs we want
    YansWifiPhyHelper wifiPhy = YansWifiPhyHelper::Default();
    YansWifiChannelHelper wifiChannel;


    // 802.11p 5.9 GHz, ITU R-1441 Loss Model
    wifiChannel.SetPropagationDelay("ns3::ConstantSpeedPropagationDelayModel");
    //wifiChannel.AddPropagationLoss("ns3::ItuR1411LosPropagationLossModel", "Frequency", DoubleValue(5.9e9));
    wifiChannel.AddPropagationLoss("ns3::HybridBuildingsPropagationLossModel", "Frequency", DoubleValue(5.9e9), "CitySize", EnumValue(ns3::SmallCity), "RooftopLevel", DoubleValue(30.0), "ShadowSigmaOutdoor", DoubleValue(3.0), "ShadowSigmaIndoor", DoubleValue(4.0), "ShadowSigmaExtWalls", DoubleValue(3.0), "InternalWallLoss", DoubleValue(1.0), "Los2NlosThr", DoubleValue(110.0));

    Ptr<YansWifiChannel> channel = wifiChannel.Create();
    wifiPhy.SetChannel(channel);
    // ns-3 supports generate a pcap trace
    wifiPhy.SetPcapDataLinkType(YansWifiPhyHelper::DLT_IEEE802_11);

    // Set Tx Power and Detection Th
    wifiPhy.Set("EnergyDetectionThreshold", DoubleValue(-96.0));

    switch (m_powerClass) {

        case 'A':
            wifiPhy.Set("TxPowerStart", DoubleValue(0.0));
            wifiPhy.Set("TxPowerEnd", DoubleValue(0.0));
            break;
        case 'B':
            wifiPhy.Set("TxPowerStart", DoubleValue(10.0));
            wifiPhy.Set("TxPowerEnd", DoubleValue(10.0));
            break;
        case 'C':
            wifiPhy.Set("TxPowerStart", DoubleValue(20.0));
            wifiPhy.Set("TxPowerEnd", DoubleValue(20.0));
            break;
        case 'D':
            wifiPhy.Set("TxPowerStart", DoubleValue(28.8));
            wifiPhy.Set("TxPowerEnd", DoubleValue(28.8));

            break;

    }


    NqosWaveMacHelper wifi80211pMac = NqosWaveMacHelper::Default();
    Wifi80211pHelper wifi80211p = Wifi80211pHelper::Default();

    wifi80211p.SetRemoteStationManager("ns3::ConstantRateWifiManager",
            "DataMode", StringValue(m_phyMode),
            "ControlMode", StringValue(m_phyMode));
    m_netDevices = wifi80211p.Install(wifiPhy, wifi80211pMac, m_nodes);



}

void SimuladorUPS::Run() {
	Simulator::Stop(m_duration);
    Simulator::Run();
    m_duration = Simulator::Now();
    Simulator::Destroy();
}


int main(int argc, char *argv[]) {
		
	
	std::cout << "Iniciando configuracion\n";
    SimuladorUPS experimento;
	
    experimento.CommandSetup(argc, argv);

	if (m_verbosity==true) {
		LogComponentEnable("SimuladorUPS", LOG_LEVEL_DEBUG);	
	}
	
	experimento.SetupWave();
	std::cout << "Iniciando simulacion!\n";
    experimento.Run();
	std::cout << "Fin!\n";
}
